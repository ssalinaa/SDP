Зад. 1
Имплементирайте шаблонен клас Node, който ще представя един възел(една кутийка) в списъка. Класът трябва да съдържа в себе си реалната данна, която носи и указатели към следващ и предишен възел. Добавете:

* конструктор по подразбиране
* конструктор с един параметър от шаблонния тип
* конструктор с параметър от шаблонния тип и два параметъра, които са указатели към друг възел
Зад. 2
Създайте шаблонен клас DoublyLinkedList, който ще представя свързания списък. Преди да имплементирате голямата четворка, добавете няколко базови методи:

* `void pushFront(const T&)` - добавя елемент в начало на списъка
* `void popFront()` - премахва елемента от началото на списъка
* `void pushBack(const T&)` - добавя елемент в края на списъка
* `void popBack()` - премахва елемента от края на списъка
* `void print()` - отпечатва всички елементи на списъка
* `T head()` - връща елемента в началото на списъка
* `T last()` - връща елемента в края на списъка
Зад. 3
Имплементирайте голямата четворка за класа DoublyLinkedListdList.

Зад. 4
Имплементирайте метод void reverse(), който обръща съдържанието на списъка. Пример:

DoublyLinkedListdList<int> l;
l.pushBack(1); l.pushBack(2); l.pushBack(3); // 1 <-> 2 <-> 3;
l.reverse(); // 3 <-> 2 <-> 1
Зад. 5
Имплементирайте метод void removeDuplicates(), който премахва повторните срещания на всеки елемент. Пример:

DoublyLinkedListdList<int> l;
l.pushBack(1); l.pushBack(2); l.pushBack(3); l.pushBack(3); l.pushBack(1); l.pushBack(1); // 1 <-> 2 <-> 3 <-> 3 <-> 1 <-> 1;
l.removeDuplicates(); // 1 <-> 2 <-> 3
