Шаблонен клас Node, който ще представя един възел(една кутийка) в свързания списък. 
Класът съдържа в себе си реалната данна, която носи и указател към следващ възел(следваща кутийка).

* конструктор по подразбиране
* конструктор с един параметър от шаблонния тип
* конструктор с параметър от шаблонния тип и параметър, който е указател към друг възел

Шаблонен клас LinkedList, който ще представя свързания списък. 

* `void pushFront(const T&)` - добавя елемент в начало на списъка
* `void popFront()` - премахва елемента в началото на списъка
* `void print()` - отпечатва всички елементи на списъка
* `T head()` - връща елемента в началото на списъка
* `T get(int)` - връща елемента на i-та позиция

* `void pushBack(const T&)` - добавя елемент към края на списъка
* `void popBack()` - премаха елемент от края на списъка
* `T last()` - връща последния елемент в списъка
* `void insertAt(const T&, int)` - добавя елемент в списъка на дадена позиция
* `void removeAt(int)` - премаха елемент в списъка на дадена позиция

* метод `LinkedList<T> reverse()`, който връща обърнатата версия на текущия списък (помислете как може да се направи метод reverse, който обръща текущия списък, а не връща нов такъв)
* метод `LinkedList<U> map(std::function<U(T)>)`, която връща нов списък, елементите на който са получени след прилагането на функцията върху елементите на текущия списък
* функция `LinkedList<T> merge(LinkedList<T>, LinkedList<T>)`, която обединява два предварително сортирани списъка в нов сортиран такъв